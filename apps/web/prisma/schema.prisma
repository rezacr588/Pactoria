// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Core contract models
model Contract {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ownerId               String    @map("owner_id") @db.Uuid
  title                 String
  status                String    @default("draft")
  latestVersionNumber   Int       @default(0) @map("latest_version_number")
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  versions              ContractVersion[]
  approvals             ContractApproval[]
  collaborators         ContractCollaborator[]
  parties               ContractParty[]
  metadata              ContractMetadata[]
  activity              ContractActivity[]

  @@map("contracts")
  @@index([ownerId], name: "idx_contracts_owner")
}

model ContractVersion {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contractId            String    @map("contract_id") @db.Uuid
  versionNumber         Int       @map("version_number")
  ydocState             Bytes?    @map("ydoc_state")
  contentMd             String?   @map("content_md")
  contentJson           Json?     @map("content_json")
  createdBy             String?   @map("created_by") @db.Uuid
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  contract              Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)
  approvals             ContractApproval[]

  @@unique([contractId, versionNumber])
  @@map("contract_versions")
  @@index([contractId], name: "idx_versions_contract")
}

model ContractApproval {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contractId            String    @map("contract_id") @db.Uuid
  versionId             String    @map("version_id") @db.Uuid
  approverId            String    @map("approver_id") @db.Uuid
  status                String    @default("pending")
  comment               String?
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz
  decidedAt             DateTime? @map("decided_at") @db.Timestamptz

  // Relations
  contract              Contract        @relation(fields: [contractId], references: [id], onDelete: Cascade)
  version               ContractVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@map("contract_approvals")
  @@index([contractId], name: "idx_approvals_contract")
  @@index([approverId], name: "idx_approvals_approver")
}

model ContractCollaborator {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contractId            String    @map("contract_id") @db.Uuid
  userId                String    @map("user_id") @db.Uuid
  role                  String    @default("viewer")
  addedBy               String    @map("added_by") @db.Uuid
  addedAt               DateTime  @default(now()) @map("added_at") @db.Timestamptz

  // Relations
  contract              Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@unique([contractId, userId])
  @@map("contract_collaborators")
  @@index([contractId], name: "idx_contract_collaborators_contract")
  @@index([userId], name: "idx_contract_collaborators_user")
}

// User profile model
model Profile {
  id                    String    @id @db.Uuid
  email                 String?
  fullName              String?   @map("full_name")
  avatarUrl             String?   @map("avatar_url")
  bio                   String?
  company               String?
  jobTitle              String?   @map("job_title")
  phone                 String?
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  @@map("profiles")
  @@index([email], name: "idx_profiles_email")
}

// Templates model
model Template {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                 String
  description           String?
  category              String    @default("general")
  contentMd             String    @map("content_md")
  contentJson           Json?     @map("content_json")
  thumbnailUrl          String?   @map("thumbnail_url")
  tags                  String[]  @default([])
  isPublic              Boolean   @default(true) @map("is_public")
  isOfficial            Boolean   @default(false) @map("is_official")
  isFeatured            Boolean   @default(false) @map("is_featured")
  published             Boolean   @default(false)
  usageCount            Int       @default(0) @map("usage_count")
  rating                Float     @default(0.0)
  reviewsCount          Int       @default(0) @map("reviews_count")
  price                 Float     @default(0.0)
  currency              String    @default("USD")
  tierRequired          String    @default("free") @map("tier_required")
  variables             Json      @default("[]")
  createdBy             String?   @map("created_by") @db.Uuid
  createdByUserId       String?   @map("created_by_user_id") @db.Uuid
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  @@map("templates")
  @@index([category], name: "idx_templates_category")
  @@index([isPublic], name: "idx_templates_public")
  @@index([isFeatured], name: "idx_templates_featured")
  @@index([createdBy], name: "idx_templates_created_by")
  @@index([createdByUserId], name: "idx_templates_creator")
}

// Email notifications model
model EmailNotification {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  recipientEmail        String    @map("recipient_email")
  subject               String
  body                  String
  templateId            String?   @map("template_id")
  templateData          Json?     @map("template_data")
  status                String    @default("pending")
  sentAt                DateTime? @map("sent_at") @db.Timestamptz
  errorMessage          String?   @map("error_message")
  retryCount            Int       @default(0) @map("retry_count")
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz

  @@map("email_notifications")
  @@index([status], name: "idx_email_notifications_status")
  @@index([createdAt], name: "idx_email_notifications_created")
}

// Analytics and monitoring
model AnalyticsEvent {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String?   @map("user_id") @db.Uuid
  sessionId             String?   @map("session_id")
  eventType             String    @map("event_type")
  eventData             Json?     @map("event_data")
  userAgent             String?   @map("user_agent")
  ipAddress             String?   @map("ip_address")
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz

  @@map("analytics_events")
  @@index([userId], name: "idx_analytics_events_user")
  @@index([eventType], name: "idx_analytics_events_type")
  @@index([createdAt], name: "idx_analytics_events_created")
}

model PerformanceMetric {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  metricName            String    @map("metric_name")
  value                 Float
  unit                  String?
  tags                  Json?
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz

  @@map("performance_metrics")
  @@index([metricName], name: "idx_performance_metrics_name")
  @@index([createdAt], name: "idx_performance_metrics_created")
}

// Billing and subscriptions
model Subscription {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String    @map("user_id") @db.Uuid
  stripeCustomerId      String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId  String?   @unique @map("stripe_subscription_id")
  stripePriceId         String?   @map("stripe_price_id")
  tierId                String    @default("free") @map("tier_id")
  status                String    @default("active")
  currentPeriodStart    DateTime? @map("current_period_start") @db.Timestamptz
  currentPeriodEnd      DateTime? @map("current_period_end") @db.Timestamptz
  cancelAtPeriodEnd     Boolean   @default(false) @map("cancel_at_period_end")
  canceledAt            DateTime? @map("canceled_at") @db.Timestamptz
  trialStart            DateTime? @map("trial_start") @db.Timestamptz
  trialEnd              DateTime? @map("trial_end") @db.Timestamptz
  metadata              Json      @default("{}") 
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  organization          Organization?

  @@map("subscriptions")
  @@index([userId], name: "idx_subscriptions_user")
  @@index([tierId], name: "idx_subscriptions_tier")
}

model Organization {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  slug                  String    @unique
  ownerId               String    @map("owner_id") @db.Uuid
  stripeCustomerId      String?   @unique @map("stripe_customer_id")
  subscriptionId        String?   @unique @map("subscription_id") @db.Uuid
  settings              Json      @default("{}")
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  subscription          Subscription? @relation(fields: [subscriptionId], references: [id])
  members               OrganizationMember[]
  invoices              Invoice[]

  @@map("organizations")
  @@index([ownerId], name: "idx_organizations_owner")
}

model OrganizationMember {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId        String    @map("organization_id") @db.Uuid
  userId                String    @map("user_id") @db.Uuid
  role                  String    @default("member")
  invitedBy             String?   @map("invited_by") @db.Uuid
  invitedAt             DateTime  @default(now()) @map("invited_at") @db.Timestamptz
  joinedAt              DateTime? @map("joined_at") @db.Timestamptz

  // Relations
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model Invoice {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String    @map("user_id") @db.Uuid
  organizationId        String?   @map("organization_id") @db.Uuid
  stripeInvoiceId       String?   @unique @map("stripe_invoice_id")
  stripeInvoiceUrl      String?   @map("stripe_invoice_url")
  stripePdfUrl          String?   @map("stripe_pdf_url")
  amountPaid            Int?      @map("amount_paid")
  amountDue             Int?      @map("amount_due")
  currency              String    @default("gbp")
  status                String
  periodStart           DateTime? @map("period_start") @db.Timestamptz
  periodEnd             DateTime? @map("period_end") @db.Timestamptz
  paidAt                DateTime? @map("paid_at") @db.Timestamptz
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  organization          Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("invoices")
  @@index([userId], name: "idx_invoices_user")
  @@index([status], name: "idx_invoices_status")
}

// Usage tracking
model UsageTracking {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String    @map("user_id") @db.Uuid
  resourceType          String    @map("resource_type")
  resourceId            String?   @map("resource_id")
  count                 Int       @default(1)
  date                  DateTime  @default(now()) @db.Date
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz

  @@unique([userId, resourceType, resourceId, date])
  @@map("usage_tracking")
  @@index([userId, date], name: "idx_usage_tracking_user_date")
}

// Additional tables from migrations
model ContractParty {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contractId            String    @map("contract_id") @db.Uuid
  partyName             String    @map("party_name")
  partyEmail            String?   @map("party_email")
  partyType             String    @default("individual") @map("party_type")
  partyRole             String    @default("party") @map("party_role")
  isPrimary             Boolean   @default(false) @map("is_primary")
  contactInfo           Json      @default("{}") @map("contact_info")
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  contract              Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("contract_parties")
  @@index([contractId], name: "idx_contract_parties_contract_id")
  @@index([partyEmail], name: "idx_contract_parties_email")
}

model ContractMetadata {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contractId            String    @map("contract_id") @db.Uuid
  key                   String
  value                 String?
  valueType             String    @default("string") @map("value_type")
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  contract              Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@unique([contractId, key])
  @@map("contract_metadata")
  @@index([contractId], name: "idx_contract_metadata_contract_id")
  @@index([key], name: "idx_contract_metadata_key")
}

model ContractActivity {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contractId            String    @map("contract_id") @db.Uuid
  userId                String?   @map("user_id") @db.Uuid
  action                String
  description           String?
  metadata              Json      @default("{}") 
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  contract              Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("contract_activity")
  @@index([contractId], name: "idx_contract_activity_contract_id")
  @@index([userId], name: "idx_contract_activity_user_id")
  @@index([createdAt(sort: Desc)], name: "idx_contract_activity_created_at")
  @@index([action], name: "idx_contract_activity_action")
}

model RateLimit {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key                   String    @unique
  count                 Int       @default(0)
  resetTime             DateTime  @map("reset_time") @db.Timestamptz
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  @@map("rate_limits")
  @@index([key], name: "idx_rate_limits_key")
  @@index([resetTime], name: "idx_rate_limits_reset_time")
}